#!/usr/bin/perl

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

# $Id$

#- Copyright (C) 2006-2012 Mandriva SA

use strict;
use File::Temp qw/ tempfile tempdir /;

BEGIN {
    #- clean environment
    $ENV{PATH} = "/sbin:/usr/sbin:/bin:/usr/bin";
    delete @ENV{qw(ENV BASH_ENV IFS CDPATH)};
}

use urpm::args;
use urpm::msg;
use URPM;
use urpm;

our $MACROS = '/etc/rpm/macros.d/urpmi.recover.macros';
our $listdate;
our $do_checkpoint;
our $noclean;
our $rollback;
our $disable;
our $transactions;
our $auto;

sub usage () {
    print N("urpmi.recover version %s
Copyright (C) 2006-2011 Mandriva.
Copyright (C) 2014 ROSA.
This is free software and may be redistributed under the terms of the GNU GPL.

usage:
", $urpm::VERSION) . N("  --help         - print this help message.
") . N("  --checkpoint   - set repackaging start now
") . N("  --noclean      - don't clean repackage directory on checkpoint
") . N("  --urpmi-root   - use another root for urpmi db & rpm installation
") . N("  --auto         - do not ask any questions
") . N("  --list         - list transactions since provided date/duration argument
") . N("  --list-all     - list all transactions in rpmdb (long)
") . N("  --list-safe    - list transactions since checkpoint
") . N("  --rollback     - rollback until specified date,
                   or rollback the specified number of transactions
") . N("  --transactions - treat rollback argument as number of transactions to be reverted
") . N("  --disable      - turn off repackaging
");
    exit(1);
}

sub fmt_tid {
    my ($tid) = @_;
    require POSIX; POSIX->import('strftime');
    strftime("%F %T", localtime($tid));
}

sub date_to_tid {
    my ($date) = @_;
    require Date::Manip; Date::Manip->import;
    my $d = ParseDate($date)
	or die N("Invalid date or duration [%s]\n", $date);
    UnixDate($d, '%s');
}

#- clean up repackage directory
sub clean_repackage_dir {
    my ($repackage_dir) = @_;
    if (!$repackage_dir || $repackage_dir eq '/') {
	die N("Repackage directory not defined\n");
    }
    -d $repackage_dir
	or die N("Can't write to repackage directory [%s]\n", $repackage_dir);
    unless ($noclean) {
	print N("Cleaning up repackage directory [%s]...\n", $repackage_dir);
	system("rm -rf $repackage_dir/*") == 0 or die("Not all files were removed!");
    }
}

sub get_oldest_checkpoint {
    my ($repackage_dir) = @_;
    my $oldest_checkpoint = `find $repackage_dir -type d | sort -n | head -2 | tail -1`;
    $oldest_checkpoint = `basename $oldest_checkpoint`;
    chomp $oldest_checkpoint;
    return $oldest_checkpoint;
}

sub get_all_transactions {
    my ($listdate, $repackage_dir) = @_;
    my $listtime = -1;
    if ($listdate eq 'checkpoint') {
	URPM::read_config_files();
	$listtime = URPM::expand("%_unsafe_rollbacks");
    } elsif ($listdate ne -1) {
	#- convert to timestamp
	$listtime = date_to_tid($listdate);
    }
    my %tids;

    my $db = URPM::DB::open() or die "Can't open RPM DB\n";
    $db->traverse(sub {
	my ($p) = @_;
	my $tid = $p->installtid;
	return if $tid < $listtime;
	exists $tids{$tid} or $tids{$tid} = [];
	push @{ $tids{$tid} }, scalar($p->fullname);
    });

    open(ROLLBACKS, "ls -1 $repackage_dir | sort -n |");
    while(<ROLLBACKS>) {
        chomp;
        my $tid = $_;
        $tid =~ s/\/$//;
        return if $tid < $listtime;
        exists $tids{$tid} or $tids{$tid} = [];
        open(PKGS, "ls -1 $repackage_dir/$tid |");
        while(<PKGS>) {
            chomp;
            push @{ $tids{$tid} }, scalar("(removed) ".$_);
        }
        close(PKGS);
    }
    close(ROLLBACKS);

    return %tids;
}

#- option parsing

@ARGV or usage();
my $command_line = "@ARGV"; #- for logging
urpm::args::parse_cmdline()
    or exit(1);
@ARGV and die N("Spurious command-line arguments [%s]\n", "@ARGV");
$do_checkpoint && $rollback
    and die N("You can't specify --checkpoint and --rollback at the same time\n");
$do_checkpoint && $listdate
    and die N("You can't specify --checkpoint and --list at the same time\n");
$rollback && $listdate
    and die N("You can't specify --rollback and --list at the same time\n");
$disable && ($listdate || $rollback || $do_checkpoint)
    and die N("You can't specify --disable along with another option");

#- --list <date> and --list-all

if ($listdate) {
    my $repackage_dir = URPM::expand("%_repackage_dir");
    my %tids = get_all_transactions($listdate, $repackage_dir);

    unless (scalar keys %tids) {
	die N("No transaction found since %s\n", $listdate);
    }
    print "Date                rpms\n";
    print "------------------- -------------------\n";
    foreach my $tid (sort { $a <=> $b } keys %tids) {
	my @p = @{$tids{$tid}};
	print fmt_tid($tid), " ", shift(@p), "\n";
	while (@p) {
	    print " " x 20, shift(@p), "\n";
	}
    }
    exit(0);
}

#- check we're running as root
$< == 0 or die N("You must be superuser to do this");

#- --checkpoint

if ($do_checkpoint) {

    URPM::read_config_files();
    my $repackage_dir = URPM::expand("%_repackage_dir");
    my $unsafe_rollbacks = time();

    clean_repackage_dir($repackage_dir);

    #- write rpm config file
    print N("Writing rpm macros file [%s]...\n", $MACROS);
    open my $fh, '>', $MACROS
	or die "Can't open $MACROS for writing: $!\n";
    print $fh <<MACROS;
# Generated by urpmi.recover

# Turn repackaging on
%_repackage_all_erasures 1

# Put repackaged rpms here (lots of space necessary)
%_repackage_dir $repackage_dir

# Don't erase on rollback before this date (seconds since epoch)
%_unsafe_rollbacks $unsafe_rollbacks

# Automate transaction rollbacks on upgrade failure
%_rollback_transaction_on_failure 0
MACROS
    close $fh;

    sys_log("checkpoint defined");
    exit(0);
}

#- --rollback

if ($rollback) {
    sys_log("called with: $command_line");

    my $repackage_dir = URPM::expand("%_repackage_dir");

    my $tid;
    if ($transactions and $rollback =~ /\D/) {
       die N("Invalid number of transactions to be reverted");
    }

    if ($rollback !~ /\D/) {
        if ($transactions) {
            #- $rollback contains a number of transactions to roll back
	    #- get a date from there
	    my %tids;
	    my $db = URPM::DB::open() or die "Can't open RPM DB\n";
	    $db->traverse(sub { ++$tids{ $_[0]->installtid } });
	    my @tids = sort { $b <=> $a } keys %tids;
	    $tid = $tids[$rollback - 1];
	} else {
  	    #- $rollback is a timestamp
            $tid = $rollback;
        }
    } else {
	#- $rollback contains a date, convert it to tid
	$tid = date_to_tid($rollback);

    }
    $tid or die N("No rollback date found\n");

    if (!$transactions) {
        my $oldest_checkpoint = get_oldest_checkpoint($repackage_dir);
        if ($oldest_checkpoint > $tid) {
            my $checkpoint_human = `date --date \@$oldest_checkpoint`;
            chomp $checkpoint_human;
            die N("The oldest available checkpoint is %d (%s), I will not revert to older stages (this can damage your system)", $oldest_checkpoint, $checkpoint_human);
        }
    }

    my $rollbackdate = fmt_tid($tid);
    print N("Rollback until %s...\n", $rollbackdate), "\n";

    # Gather all repackaged files from repackage_dir
    # corresponding to the dates before the requested one
    my $tmpDir = tempdir(CLEANUP => 1);
    my %old_pkgs = {};
    my @processed_dirs = ();

    open(PKG_DIRS, "find $repackage_dir -type d | sort -nr |");
    while(<PKG_DIRS>) {
        chomp;
        my $pkgs_dir = $_;
        if ($pkgs_dir eq $repackage_dir) {
            next;
        }
        my $dir_date = `basename $pkgs_dir`;
        chomp $dir_date; 
        if ($dir_date < $tid) {
            last;
        }
        push @processed_dirs, $pkgs_dir;

        open(PKGS, "ls -1 $pkgs_dir | grep 'rpm\$'|");
        while(<PKGS>) {
            chomp;
            my $pkg = $_;
            my $pkg_name = $pkg;
            $pkg_name =~ s/-([^-]+)-([^-]+)-([^-]+).rpm$//;
            $old_pkgs{$pkg_name} = 1;

            if( ! -e "$tmpDir/$pkg" ) {
                system("ln -s $pkgs_dir/$pkg $tmpDir/$pkg") == 0 or die();
            }
        }
        close(PKGS);
    }
    close(PKG_DIRS);

    # Clean up - leave the oldest version of every package
    my $num_pkgs = `find $tmpDir -type f | wc -l`;
    chomp $num_pkgs;
    if( $num_pkgs > 0 ) {
        system("urpm-repomanage -qlc $tmpDir || :") == 0 or die();
    }

    # Collect completely new packages that were not installed before the checkpoint
    my @new_pkgs = ();
    open(INSTALLED_RPMS, "rpm -qa --queryformat '\%{installtime} \%{name}\n' | sort -r |");
    while(<INSTALLED_RPMS>) {
        chomp;
        my ($pkg_date, $pkg_name) = split(' ');
        if ($pkg_date < $tid) {
            last;
        }
        if( !defined $old_pkgs{$pkg_name} ) {
            push @new_pkgs, $pkg_name;
        }
    }
    close(INSTALLED_RPMS);

    if (!$auto) {
        # Provide user with lists of packages to be downgraded/removed
        # and ask for confirmation
        print "\n== Old versions of the following packages will be installed ==\n";
        system("ls -1 $tmpDir | grep rpm");

        print "\n== The following pakcages will be removed ==\n";

        foreach my $p (@new_pkgs) {
            print " $p\n";
        }

        my $noexpr = N("Nn");
        my $msg = N("\nDo you want to proceed?");
        my $confirm = message_input_($msg . N(" (Y/n) "), boolean => 1) !~ /[$noexpr]/;
        if (!$confirm) {
            exit(1);
        }
    }

    foreach my $p (@new_pkgs) {
        print "Removing $p\n";
        system("/bin/rpm --norepackage -e --nodeps $p") == 0 or die();
    }
    # Use faketime to tweak package installation date
    my $dt=`date -d \@$tid '+%Y-%m-%d %H:%M:%S'`;
    print "Downgrading packages...\n";
    system("faketime '$dt' rpm -iU --norepackage --oldpackage $tmpDir/*rpm") == 0 or die();

    unless ($noclean) {
        foreach my $d (@processed_dirs) {
            system("rm -rf $d") == 0 or die();
        }
    }

#    exec '/bin/rpm', '-Uvh', '--rollback', $rollbackdate;
}

#- --disable

if ($disable) {
    print N("Disabling repackaging\n");

    unless ($noclean) {
	URPM::read_config_files();
	my $repackage_dir = URPM::expand("%_repackage_dir");
	clean_repackage_dir($repackage_dir);
    }

    open my $fh, '<', $MACROS
	or die "Can't open $MACROS for reading: $!\n";
    my $macrosfile = join '', <$fh>;
    close $fh;
    #- turn off repackaging macro
    $macrosfile =~ s/_repackage_all_erasures\s+\w+/_repackage_all_erasures 0/g;
    print N("Writing rpm macros file [%s]...\n", $MACROS);
    open $fh, '>', $MACROS
	or die "Can't open $MACROS for writing: $!\n";
    print $fh $macrosfile;
    close $fh;

    sys_log("repackaging disabled");
    exit(0);
}
