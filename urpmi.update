#!/usr/bin/perl

#- Copyright (C) 2000 MandrakeSoft (fpons@mandrakesoft.com)
#-
#- This program is free software; you can redistribute it and/or modify
#- it under the terms of the GNU General Public License as published by
#- the Free Software Foundation; either version 2, or (at your option)
#- any later version.
#-
#- This program is distributed in the hope that it will be useful,
#- but WITHOUT ANY WARRANTY; without even the implied warranty of
#- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#- GNU General Public License for more details.
#-
#- You should have received a copy of the GNU General Public License
#- along with this program; if not, write to the Free Software
#- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

#- this program is based upon old urpmi.addmedia

#use strict qw(subs vars refs);
use urpm;

sub main {
    my (@toupdates, %options);
    my $urpm = new urpm;

    $options{force} = 0;
    $options{noclean} = 1;
    while ($_ = shift @_) {
	/^--?a/ and $options{all} = 1, next;
	/^--?c/ and $options{noclean} = 0, next;
	/^--?d/ and $options{depslist} = 1, next;
	/^--?f/ and ++$options{force}, next;
	/^--update$/ and $options{update} = 1, next;
	/^--wget$/ and $urpm->{sync} = sub { my $options = shift @_;
					     if (ref $options) { $options->{prefer} = 'wget' }
					     else { $options = { dir => $options, prefer => 'wget' } }
					     urpm::sync_webfetch($options, @_) }, next;
	/^--curl$/ and $urpm->{sync} = \&urpm::sync_webfetch, next;
	/^--limit-rate$/ and do { $options{limit_rate} = shift @_; next };
	/^--proxy$/ and do {
	    my ($proxy, $port) = ($_ = shift @_) =~ m,^(?:http://)?([^:]+(:\d+)?)/*$, or
		die N("bad proxy declaration on command line\n");
	    $proxy .= ":1080" unless $port;
	    $urpm->{proxy}{http_proxy} = $proxy;
	    next;
	};
	/^--proxy-user$/ and do {
	    ($_ = shift @_) =~ /(.+):(.+)/, or
		die N("bad proxy declaration on command line\n");
	    $urpm->{proxy}{user} = $1;
	    $urpm->{proxy}{pwd} = $2;
	    next;
	};
	/^--?noa/ and next; #- default, keeped for compability.
	/^-/ and die N("usage: urpmi.update [options] <name> ...
where <name> is a medium name to update.
") . N("  --help         - print this help message.
") . N("  --wget         - use wget to retrieve distant files.
") . N("  --curl         - use curl to retrieve distant files.
") . N("  --limit-rate   - limit the download speed.
") . N("  --proxy        - use specified HTTP proxy, the port number is assumed
                   to be 1080 by default (format is <proxyhost[:port]>).
") . N("  --proxy-user   - specify user and password to use for proxy
                   authentication (format is <user:password>).
") . N("  --update       - update only update media.
") . N("  -a             - select all non-removable media.
") . N("  -c             - clean headers cache directory.
") . N("  -d             - force complete computation of depslist.ordered file.
") . N("  -f             - force generation of hdlist files.
") . (/^--?h(?:elp)$/ ? '' : N("\nunknown options '%s'\n", $_));
	push @toupdates, $_;
    }

    $urpm->read_config;
    exists $options{limit_rate} or $options{limit_rate} = $urpm->{options}{'limit-rate'};

    my @entries = map { $_->{name} } @{$urpm->{media}};

    if ($options{all}) {
	@entries == 0 and die N("nothing to update (use urpmi.addmedia to add a media)\n");
    } else {
	$urpm->select_media(@toupdates);

	#- force ignored media to be returned alive.
	my $something_todo = 0;
	foreach (@{$urpm->{media}}) {
	    $options{update} && $_->{update} and $_->{modified} = 1;
	    $_->{modified} and delete $_->{ignore};
	    $_->{modified} and ++$something_todo;
	}

	$something_todo or die N("the entry to update is missing\n(one of %s)\n", join(", ", @entries));
    }

    $urpm->update_media(%options, callback => \&urpm::sync_logger);

    #- try to umount removable device which may have been mounted.
    $urpm->try_umounting_removables;
}

main(@ARGV);
