#!/usr/bin/perl

#- Copyright (C) 2000 MandrakeSoft (fpons@mandrakesoft.com)
#-
#- This program is free software; you can redistribute it and/or modify
#- it under the terms of the GNU General Public License as published by
#- the Free Software Foundation; either version 2, or (at your option)
#- any later version.
#-
#- This program is distributed in the hope that it will be useful,
#- but WITHOUT ANY WARRANTY; without even the implied warranty of
#- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#- GNU General Public License for more details.
#-
#- You should have received a copy of the GNU General Public License
#- along with this program; if not, write to the Free Software
#- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

#- this program is based upon old urpmi.addmedia

#use strict qw(subs vars refs);
use urpm;

#- get I18N translation method.
import urpm _;

sub main {
    my ($name, $url, $with, $relative_hdlist, %options);
    my $usage = _("usage: urpmi.addmedia [options] <name> <url> [with <relative_path>]
where <url> is one of
       file://<path>
       ftp://<login>:<password>@<host>/<path> with <relative filename of hdlist>
       ftp://<host>/<path> with <relative filename of hdlist>
       http://<host>/<path> with <relative filename of hdlist>
       removable://<path>

and [options] are from
") . _("  -c             - clean headers cache directory.
") . _("  -h             - try to find and use synthesis or hdlist file.
") . _("  -f             - force generation of hdlist files.
") . _("  --wget         - use wget to retrieve distant files.
") . _("  --curl         - use curl to retrieve distant files.
") . _("  --update       - create an update medium.
") . _("  --distrib      - automatically create all media from an installation medium.
");

    $options{force} = 0;
    $options{noclean} = 1;
    my $urpm = new urpm;
    while ($_ = shift @_) {
	/^--?c/ and $options{noclean} = 0, next;
	/^--?h/ and $options{probe_with_hdlist} = 1, next;
	/^--?f/ and ++$options{force}, next;
	/^--wget/ and $urpm->{sync} = \&urpm::sync_wget, next;
	/^--curl/ and $urpm->{sync} = \&urpm::sync_curl, next;
	/^--distrib$/ and $options{distrib} = 1, next;
	/^--update$/ and $options{update} = 1, next;
	/^-/ and die $usage . _("\nunknown options '%s'\n", $_);
	($name, $url, $with, $relative_hdlist) = ($_, @_);
	last;
    }
    #- allow not to give name immediately.
    $url or ($url, $name) = ($name, '');
    my ($type) = $url =~ m,^([^:]*)://, or die $usage;

    $urpm->read_config;

    if ($options{distrib}) {
	$with || $relative_hdlist and die _("%s\nno need to give <relative path of hdlist> with --distrib", $usage);

	$urpm->add_distrib_media($name, $url, update => $options{update});
	$urpm->update_media(%options);

	if (my @unsynced_media = grep { $_->{modified} } @{$urpm->{media}}) {
	    die join("\n", map { _("unable to update medium \"%s\"\n", $_->{name}) } @unsynced_media);
	}
    } else {
	$name or die $usage;

	if ($with eq "with") {
	    $relative_hdlist or die _("%s\n<relative path of hdlist> missing\n", $usage);
	} elsif ($type =~ /ftp|http/) {
	    $options{probe_with_hdlist} || $with eq "with" or die _("%s\n`with' missing for ftp media\n", $usage);
	}

	$urpm->add_medium($name, $url, $relative_hdlist, update => $options{update});
	$urpm->update_media(%options);

	#- check creation of media (during update has been successfull)
	my ($medium) = grep { $_->{name} eq $name } @{$urpm->{media}};
	$medium or die _("unable to create medium \"%s\"\n", $name);
	$medium->{modified} and die _("unable to update medium \"%s\"\n", $name);
    }
}

main(@ARGV);
